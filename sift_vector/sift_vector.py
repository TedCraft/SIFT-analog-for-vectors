# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SIFTVector
                                 A QGIS plugin
 SIFT algorithm for vectors
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-17
        git sha              : $Format:%H$
        copyright            : (C) 2022 by TedCraft
        email                : tedwo@yandex.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis import processing
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QRegExp
from qgis.PyQt.QtGui import QIcon, QRegExpValidator
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsWkbTypes, QgsGeometry, QgsVectorFileWriter, QgsFeature, QgsVectorLayer
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .sift_vector_dockwidget import SIFTVectorDockWidget
import os.path

import math
import time

def distance(start_point, end_point):
    return ((end_point[0]-start_point[0])**2 + (end_point[1]-start_point[1])**2) ** 0.5

def perpendicular_distance(point, start_point, end_point):
   numerator = abs((end_point[0]-start_point[0]) * (start_point[1]-point[1]) - (end_point[1]-start_point[1]) * (start_point[0]-point[0]))
   denominator = distance(start_point, end_point)
   return numerator/denominator

def compute_keypoints(vector, epsilon):
    dmax = 0.0
    index = -1
    
    for i in range(1, len(vector)-1):
        d = perpendicular_distance(vector[i], vector[0], vector[-1])
        
        if d > dmax:
            index = i
            dmax = d
            
    if dmax > epsilon:
        left = compute_keypoints(vector[:index + 1], epsilon)
        right = compute_keypoints(vector[index:], epsilon)
        
        return left[:-1] + right
    return [vector[0], vector[-1]]
    
def compute_epsilon(vector):
    d = 0
    for i in range(1, len(vector)-1):
        d += perpendicular_distance(vector[i], vector[0], vector[-1])
    
    return d/((len(vector)-2) or 1)
    
def compute_descriptors(vector, keypoints):
    iter = 1
    descriptors = []
    for i in range(1, len(vector) - 1):
        if vector[i][0] == keypoints[iter][0] and vector[i][1] == keypoints[iter][1]:
            left_point = vector[i-1]
            left_keypoint = keypoints[iter-1]
            right_point = vector[i+1]
            right_keypoint = keypoints[iter+1]
            keypoint = keypoints[iter]
            
            
            l_a = distance(keypoint, left_point)
            l_b = distance(left_point, left_keypoint)
            l_c = distance(keypoint, left_keypoint)
            
            if l_b != 0:
                l_angle = math.acos((l_a**2 + l_c**2 - l_b**2)/(2*l_a*l_c))*(180/math.pi)
            else:
                l_angle = 0
                
            
            r_a = distance(keypoint, right_point)
            r_b = distance(right_point, right_keypoint)
            r_c = distance(keypoint, right_keypoint)
            
            if r_b != 0:
                r_angle = math.acos((r_a**2 + r_c**2 - r_b**2)/(2*r_a*r_c))*(180/math.pi)
            else:
                r_angle = 0
            
            descriptors.append([keypoint, [l_a, l_angle], [r_a, r_angle]])
            iter += 1
    return descriptors
    
def compute(layer, one_vector = False, epsilon = None):
    descriptors = []
    for feature in layer.getFeatures():
        geometry = feature.geometry()
        epsilon_array = []
        for line_string in geometry.asMultiPolyline():
            if one_vector:
                for point in line_string:
                    epsilon_array.append(point)
            else:
                keypoints = compute_keypoints(line_string, epsilon or compute_epsilon(line_string))
                descriptors = descriptors + compute_descriptors(line_string, keypoints)

        if one_vector:
            keypoints = compute_keypoints(epsilon_array, epsilon or compute_epsilon(epsilon_array))
            descriptors = descriptors + compute_descriptors(epsilon_array, keypoints)
        
    return descriptors
    
def find(descr1, descr2):
    output = []
    for keypoint1 in descr1:
        for keypoint2 in descr2:
            if (round(keypoint1[1][0], 6) == round(keypoint2[1][0], 6) and
                round(keypoint1[1][1], 6) == round(keypoint2[1][1], 6) and
                round(keypoint1[2][0], 6) == round(keypoint2[2][0], 6) and
                round(keypoint1[2][1], 6) == round(keypoint2[2][1], 6)):
                output.append([keypoint1, keypoint2])
    return output

class SIFTVector:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SIFTVector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SIFT Vector')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'SIFTVector')
        self.toolbar.setObjectName(u'SIFTVector')

        #print "** INITIALIZING SIFTVector"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SIFTVector', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sift_vector/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Sift Vector'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING SIFTVector"
        
        self.dockwidget.comboBox.clear()
        self.dockwidget.comboBox_2.clear()
        
        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD SIFTVector"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SIFT Vector'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING SIFTVector"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = SIFTVectorDockWidget()
                def change_enabled(line_edit):
                    line_edit.setEnabled(not line_edit.isEnabled())
                
                validator = QRegExpValidator(QRegExp(r'[0-9].+'))
                self.dockwidget.lineEdit.setValidator(validator)
                self.dockwidget.lineEdit_2.setValidator(validator)
                
                self.dockwidget.checkBox.clicked.connect(lambda: change_enabled(self.dockwidget.lineEdit))
                self.dockwidget.checkBox_2.clicked.connect(lambda: change_enabled(self.dockwidget.lineEdit_2))
                
                def compute_sift():
                    idx1 = self.dockwidget.comboBox.currentIndex()
                    idx2 = self.dockwidget.comboBox_2.currentIndex()
                    
                    layer1 = layers[idx1]
                    layer2 = layers[idx2]
                    
                    epsilon1 = None
                    epsilon2 = None
                    
                    if not self.dockwidget.checkBox.isChecked():
                        epsilon1 = int(self.dockwidget.lineEdit.text() or "0")
                    if not self.dockwidget.checkBox_2.isChecked():
                        epsilon2 = int(self.dockwidget.lineEdit_2.text() or "0")
                    
                    one_vector1 = self.dockwidget.checkBox_3.isChecked()
                    one_vector2 = self.dockwidget.checkBox_4.isChecked()
                    
                    print(epsilon1)
                    descr1 = compute(layer1, one_vector1, epsilon1)
                    descr2 = compute(layer2, one_vector2, epsilon2)
                    features = find(descr1, descr2)
                    
                    vl = processing.run("native:saveselectedfeatures", {'INPUT': layer1, 'OUTPUT': 'memory:'})['OUTPUT']
                    pr = vl.dataProvider()
                    index = 0
                    for feature in features:
                        f = QgsFeature(index)
                        f.setGeometry(QgsGeometry.fromPolylineXY([feature[0][0], feature[1][0]]))
                        pr.addFeature(f)
                        vl.updateExtents()
                        index += 1
                    QgsProject.instance().addMapLayer(vl)
                    
                self.dockwidget.pushButton.clicked.connect(compute_sift)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.TopDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            
            layers = list(QgsProject.instance().mapLayers().values())
            layers_names = [layer.name() for layer in layers]
            self.dockwidget.comboBox.addItems(layers_names)
            self.dockwidget.comboBox_2.addItems(layers_names)